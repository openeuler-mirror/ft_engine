# Copyright (c) 2023 Huawei Technologies Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/gn/fangtian.gni")
import("//display_server/ft_build/ds_config.gni")

# On the openEuler platform, display_server and window_manager are in the same process
# Use sa_main.bin instead of render_service.bin

group("render_service_group") {
  deps = [ ":librender_service" ]
}

ft_shared_library("librender_service") {
  defines = ft_defines
  defines += gpu_defines
  defines += fps_defines
  if (use_musl) {
    defines += [ "FRAME_AWARE_TRACE" ]
  }

  cflags = [ "-Wno-c++11-narrowing" ]

  sources = [
    "../core/pipeline/rs_base_render_engine.cpp",
    "../core/pipeline/rs_base_render_util.cpp",
    "../core/pipeline/rs_cold_start_thread.cpp",
    "../core/pipeline/rs_composer_adapter.cpp",
    "../core/pipeline/rs_divided_render_util.cpp",
    "../core/pipeline/rs_main_thread.cpp",
    "../core/pipeline/rs_physical_screen_processor.cpp",
    "../core/pipeline/rs_processor.cpp",
    "../core/pipeline/rs_processor_factory.cpp",
    "../core/pipeline/rs_qos_thread.cpp",
    "../core/pipeline/rs_render_engine.cpp",
    "../core/pipeline/rs_render_service.cpp",
    "../core/pipeline/rs_render_service_connection.cpp",
    "../core/pipeline/rs_render_service_listener.cpp",
    "../core/pipeline/rs_render_service_visitor.cpp",
    "../core/pipeline/rs_surface_capture_task.cpp",
    "../core/pipeline/rs_uni_render_engine.cpp",
    "../core/pipeline/rs_uni_render_judgement.cpp",
    "../core/pipeline/rs_uni_render_listener.cpp",
    "../core/pipeline/rs_uni_render_mirror_processor.cpp",
    "../core/pipeline/rs_uni_render_processor.cpp",
    "../core/pipeline/rs_uni_render_util.cpp",
    "../core/pipeline/rs_uni_render_visitor.cpp",
    "../core/pipeline/rs_unmarshal_thread.cpp",
    "../core/pipeline/rs_virtual_screen_processor.cpp",
    "../core/screen_manager/rs_screen.cpp",
    "../core/screen_manager/rs_screen_manager.cpp",
    "../core/transaction/rs_render_service_connection_stub.cpp",
    "../core/transaction/rs_render_service_stub.cpp",
  ]

  if (rs_enable_eglimage) {
    sources += [ "../core/pipeline/rs_egl_image_manager.cpp" ]
  }

  include_dirs = [
    "../core",
    "$display_server_root/frameworks/surface/include",
    "$display_server_root/rosen/include",
    "$display_server_root/rosen/modules/composer/vsync/include",
    "$display_server_root/rosen/modules/render_frame_trace/include",
    "$display_server_root/rosen/modules/render_service_base/src",
    "$display_server_root/rosen/modules/utils",
    "$display_server_root/utils/log",
    "$display_server_root/rosen/modules/render_service_base/src/platform/fangtian/include",
    "$display_server_root/utils/socketpair/export",
    "$rosen_root/modules/2d_graphics/src",
  ]

  deps = [
    "$display_server_root/frameworks/surface/ft_build:surface",
    "$display_server_root/rosen/modules/composer/ft_build:libcomposer",
    "$display_server_root/rosen/modules/render_frame_trace/ft_build:render_frame_trace",
    "$display_server_root/rosen/modules/render_service_base/ft_build:librender_service_base",
  ]

  public_deps = [
    "//build/gn/configs/system_libs:samgr",
    "//build/gn/configs/system_libs:hitrace_meter",
    "//build/gn/configs/system_libs:skia",
    "//build/gn/configs/system_libs:syspara",
    "//build/gn/configs/system_libs:safwk",
    "//build/gn/configs/system_libs:eventhandler",
    "//build/gn/configs/system_libs:image",
  ]

  libs = ["png" ]
  libs += libgl
}
